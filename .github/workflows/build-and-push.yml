name: Build & Push (cesizen)

on:
  push:
    branches: [ "main" ]          # push vers GHCR sur main
    tags:     [ "v*" ]            # ex: v1.2.3 => image taguée v1.2.3
  pull_request:
    branches: [ "main" ]          # build uniquement (pas de push)
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write                 # nécessaire pour pousser sur GHCR

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend-tests:
    name: Backend (Symfony) — Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, pdo_sqlite, pdo_pgsql
          coverage: none
          tools: composer:v2

      - name: Cache Composer
        uses: actions/cache@v3
        with:
          path: |
            ~/.composer/cache/files
            backend/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('backend/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies (Composer)
        working-directory: backend
        run: composer install --prefer-dist --no-progress --no-interaction

      # Option simple : tests sur SQLite (évite de provisionner une base distante pour le job CI)
      - name: Configure test env (.env.test.local)
        working-directory: backend
        run: |
          echo "APP_ENV=test" > .env.test.local
          echo "DATABASE_URL=sqlite:///%kernel.project_dir%/var/test.db" >> .env.test.local

      # Si Doctrine est présent, ces commandes aident (tolérance d'erreur si Doctrine absent)
      - name: Prepare test database (optional)
        working-directory: backend
        run: |
          php bin/console doctrine:database:create --env=test --if-not-exists || true
          php bin/console doctrine:schema:create  --env=test || php bin/console doctrine:migrations:migrate -n --env=test || true

      - name: Run PHPUnit
        working-directory: backend
        env:
          APP_ENV: test
        run: |
          if [ -f vendor/bin/phpunit ]; then
            vendor/bin/phpunit --colors=always
          else
            echo "PHPUnit introuvable dans vendor/. Vérifie composer.json (require-dev)"; exit 1
          fi

  docker:
    name: Build & Push images
    runs-on: ubuntu-latest
    needs: backend-tests
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: frontend
            repo: cesizen-web
            context: ./frontend
            file: ./frontend/Dockerfile
          - name: backend
            repo: cesizen-backend
            context: ./backend
            file: ./backend/Dockerfile

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # On force l'owner en minuscule (GHCR aime les noms lowercase)
      - name: Compute lowercase owner
        run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.OWNER_LC }}/${{ matrix.repo }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag
            type=sha
            type=ref,event=branch

      - name: Build & Push ${{ matrix.name }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
