name: Build & Push (cesizen)

on:
  push:
    branches: [ "main" ]          # push vers GHCR sur main
    tags:     [ "v*" ]            # ex: v1.2.3 => image taguée v1.2.3
  pull_request:
    branches: [ "main" ]          # build uniquement (pas de push)
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write                 # nécessaire pour pousser sur GHCR

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: frontend
            repo: cesizen-web
            context: ./frontend
            file: ./frontend/Dockerfile
          - name: backend
            repo: cesizen-backend
            context: ./backend
            file: ./backend/Dockerfile

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # On force l'owner en minuscule (GHCR aime les noms lowercase)
      - name: Compute lowercase owner
        run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # docs: https://github.com/docker/login-action
      # (GITHUB_TOKEN + packages:write suffit pour GHCR) 

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.OWNER_LC }}/${{ matrix.repo }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag
            type=sha
            type=ref,event=branch

      - name: Build & Push ${{ matrix.name }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
